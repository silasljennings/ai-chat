'use server';

import {generateText, Message, UIMessage} from 'ai';
import {cookies} from 'next/headers';

import {
  deleteMessagesByChatIdAfterTimestamp,
  getMessageById,
  reloadAt,
  updateChatVisibilityById,
} from '@/lib/db/queries';
import {VisibilityType} from '@/components/visibility-selector';
import {registry} from "@/lib/ai/registry";

function getSelectedModel(model: string) {
  switch (model) {
    case 'openai':
      return registry.languageModel('openai:gpt-4o');
    case 'anthropic':
      return registry.languageModel('anthropic:claude-3-5-haiku-latest');
    case 'gemini':
      return registry.languageModel('gemini:gemini-1.5-flash');
    case 'deepseek':
      return registry.languageModel('deepseek:deepseek-chat');
    case 'xai':
      return registry.languageModel('xAi:grok-3-fast');
    default:
      return registry.languageModel('openai:gpt-4o');
  }
}

export async function saveChatModelAsCookie(model: string) {
  const cookieStore = await cookies();
  cookieStore.set('chat-model', model);
}

export async function getChatModelCookie(): Promise<string> {
  const cookieStore = await cookies();
  return cookieStore.get('chat-model')?.value ?? 'openai';
}

export async function generateTitleFromUserMessage({ message, }: { message: Message; }) {
  const { text: title } = await generateText({
    model: registry.languageModel('openai:gpt-4o'),
    system: `\n
    - you will generate a short title based on the first message a user begins a conversation with
    - ensure it is not more than 80 characters long
    - the title should be a summary of the user's message
    - do not use quotes or colons`,
    prompt: JSON.stringify(message),
  });
  return title;
}

export async function reGenerateTextFromUserMessage({prompt, response, model}: { prompt: string, response: string; model: string; }) {
  const selectedModel = getSelectedModel(model);
  const { text: regeneratedResponse } = await generateText({
    model: selectedModel,
    system: `\n
    - you will generate a response for the prompt
    - in your case, your execution occurs when a user is needing to re generate a new response
    - it cannot match the last response: ${response}
    - at the end of the response please specify that the response was generated by the ${selectedModel.modelId} as a short one sentence summary.
   `,
    prompt: prompt,
  });

  return regeneratedResponse;
}

export async function deleteTrailingMessages({ id }: { id: string }) {
  const [message] = await getMessageById({ id });

  await deleteMessagesByChatIdAfterTimestamp({ chatId: message.chatId, timestamp: message.createdAt, });
}

export async function updateChatVisibility({chatId, visibility,}: { chatId: string; visibility: VisibilityType; }) {
  await updateChatVisibilityById({ chatId, visibility });
}

export async function regenerateAssistantMessage({chatId, assistantMessageId, model}: { chatId: string; assistantMessageId: string; model: string}): Promise<UIMessage> {
  const updatedMessage = await reloadAt({ chatId, assistantMessageId, model });
  return {...updatedMessage, content: ''} as UIMessage;
}